# -*- coding: utf-8 -*-
"""S5-06minhhua@gmail.com 1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hS5z_gxwZuXCvqMGD4Li2HgZGvQD6lWi

<h1><center>

<img src="https://i.imgur.com/LSeMSbh.jpg" alt="logo" width="700" height="300">
<h1><b>SESSION 5 - LINEAR REGRESSION</b></h1>

</center></h1>

<h1><b><center>∆Ø·ªöC L∆Ø·ª¢NG DOANH THU C·ª¶A M·ªòT C√îNG TY B√ÅN KEM D·ª∞A V√ÄO NHI·ªÜT ƒê·ªò TRONG TH√ÅNG</center></b></h1>

#**Create Data**

T·∫°o short-cut ƒë·∫øn [**dataset**](https://drive.google.com/file/d/1wZETgqcnl0dQJ8FV3hI_Y64LK1KNfGyE/view?usp=share_link) t·ª´ Google Drive r·ªìi ch·∫°y c√°c cell code d∆∞·ªõi ƒë√¢y ƒë·ªÉ t·∫°o data
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np

df = pd.read_csv('/content/drive/MyDrive/IceCreamData.csv')
df.head()

x = df['Temperature'].values
y = df['Revenue'].values
x.shape, y.shape

"""#**TODO: Visualize Data**

Scatter c√°c ƒëi·ªÉm (x,y)
"""

# YOUR CODE HERE
import matplotlib.pyplot as plt
plt.scatter(x, y)
plt.show

"""#**TODO: Split Data**

T√°ch t·∫≠p d·ªØ li·ªáu (x,y) th√†nh 2 t·∫≠p train, test b·∫±ng th∆∞ vi·ªán **scikit-learn** ([document](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html)) sao cho t·∫≠p test c√≥ 50 sample. In ra shape c·ªßa c√°c t·∫≠p d·ªØ li·ªáu ƒë·ªÉ bi·∫øt k·∫øt qu·∫£
"""

# YOUR CODE HERE
from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=50)

print(x_train.shape)
print(y_train.shape)
print(x_test.shape)
print(y_test.shape)

"""Scatter l·∫°i 2 t·∫≠p train, test (2 t·∫≠p 2 m√†u kh√°c nhau)"""

# YOUR CODE HERE
import matplotlib.pyplot as plt
plt.scatter(x_train, y_train)
plt.scatter(x_test, y_test)
plt.show

"""#**TODO: Create, Train, Evaluate**

T·∫°o v√† fit model tr√™n t·∫≠p train (ch√∫ √Ω shape)
"""

from sklearn.linear_model import LinearRegression

model = LinearRegression()

x= x.reshape(-1,1)
model.fit(x, y)

# YOUR CODE HERE
x_train = x_train.reshape(-1,1)
model.fit(x_train, y_train)

"""**Weights**"""

# YOUR CODE HERE
print("weights", model.coef_)
print("bias", model.intercept_)

"""**Evaluate:** ƒë√°nh gi√° model tr√™n t·∫≠p test"""

# YOUR CODE HERE
from sklearn.metrics import mean_absolute_error as mae
from sklearn.metrics import mean_squared_error as mse

print(model.score(x, y))

y_pred = model.predict(x)
print(mae(y_pred, y))
print(mse(y_pred, y))

"""#**TODO: Regression Line**

Scatter l·∫°i t·∫≠p (x,y) v√† plot Regression Line
"""

# YOUR CODE HERE
import matplotlib.pyplot as plt

x_line = np.array([0, 50]).reshape(-1,1)
y_line = model.predict(x_line)

plt.scatter(x, y)
plt.scatter(x_test, y_test)
plt.plot(x_line, y_line, c='y')
plt.xlabel('height')
plt.ylabel('weight')
plt.show()

"""#**TODO: Save Model**"""

# YOUR CODE HERE
import pickle

filename = 'model.Revenue Prediction'

pickle.dump(model, open(filename, "wb"))
model = pickle.load(open(filename, "rb"))

"""#**TODO: Deploy Streamlit App**

T·∫°o ·ª©ng d·ª•ng Streamlit (d√πng Streamlit Cloud) cho ph√©p ng∆∞·ªùi d√πng nh·∫≠p v√†o nhi·ªát ƒë·ªô, xu·∫•t ra doanh thu d·ª± b√°o trong th√°ng

<center>
<img src="https://i.imgur.com/StAakCD.png"height="300">
<h1>
</center>

![]()

**L∆∞u √Ω:**
- C√≥ th·ªÉ t·∫°o repository m·ªõi (ƒë·∫∑t t√™n tu·ª≥ √Ω) ho·∫∑c d√πng l·∫°i repository c≈© (`my-first-streamlit-app`)
- Download file model ƒë√£ l∆∞u ·ªü tr√™n r·ªìi upload l√™n repository, sau ƒë√≥ load l·∫°i model (b·∫±ng th∆∞ vi·ªán pickle) ƒë·ªÉ d√πng cho predict
- requirements.txt
```
pickles
scikit-learn
```


---



**YOUR REPOSITORY LINK:**

**YOUR APP PUBLIC LINK:**

#**Bonus**
L√†m l·∫°i b√†i to√°n tr√™n m√† kh√¥ng d√πng th∆∞ vi·ªán `scikit-learn` (ch·ªâ d√πng `numpy`)

**T√≠nh ra b·ªô tr·ªçng s·ªë b·∫±ng c√¥ng th·ª©c ƒë·∫°o h√†m**

Nh·∫Øc l·∫°i c√¥ng th·ª©c t√≠nh b·ªô tr·ªçng s·ªë t·ªëi ∆∞u c·ªßa b√†i to√°n Linear Regression:

$$\bar{ùê∞} = (\bar{ùêó}^T\bar{ùêó})^{-1}\bar{ùêó}^Tùê≤$$

**L∆∞u √Ω:**
- D√πng h√†m `np.linalg.pinv` ƒë·ªÉ t√≠nh ma tr·∫≠n ngh·ªãch ƒë·∫£o (ch·ªâ c√≥ ma tr·∫≠n vu√¥ng m·ªõi c√≥ ma tr·∫≠n ngh·ªãch ƒë·∫£o)
- C√≥ th·ªÉ d√πng `list` v√† v√≤ng l·∫∑p ƒë·ªÉ t·∫°o ma tr·∫≠n $\bar{ùêó}$ (n·∫øu kh√¥ng d√πng ƒë∆∞·ª£c c√°c h√†m `numpy`)
- ƒê·ªÉ nh√¢n ma tr·∫≠n c√≥ th·ªÉ d√πng c√∫ ph√°p ng·∫Øn g·ªçn nh∆∞ sau
```python
c = a @ b # thay v√¨ c = np.dot(a,b)
```
"""

# YOUR CODE HERE

"""**T√≠nh MAE, MSE** (b·∫±ng h√†m numpy)"""

# YOUR CODE HERE

"""**T·ª± vi·∫øt class LinearRegression** t∆∞∆°ng t·ª± nh∆∞ class c·ªßa th∆∞ vi·ªán `scikit-klearn` (g·ªìm 2 h√†m `fit` v√† `predict`), sau ƒë√≥ g·ªçi t·∫°o ƒë·ªëi t∆∞·ª£ng c·ªßa class r·ªìi g·ªçi h√†m ƒë·ªÉ ki·ªÉm tra & so s√°nh k·∫øt qu·∫£"""

import numpy as np

# YOUR CODE HERE
class LinearRegression:
  def fit(self, x, y):
    pass

  def predict(self, x):
    pass